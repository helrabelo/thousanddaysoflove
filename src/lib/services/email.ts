import { Guest, Payment } from '@/types/wedding'

export class EmailService {
  private static apiKey = process.env.SENDGRID_API_KEY
  private static fromEmail = process.env.SENDGRID_FROM_EMAIL || 'noreply@thousanddaysoflove.com'
  private static fromName = process.env.SENDGRID_FROM_NAME || 'Hel & Ylana - Mil Dias de Amor'

  // Send RSVP confirmation email
  static async sendRsvpConfirmation(guest: Guest): Promise<boolean> {
    if (!this.apiKey) {
      console.error('SendGrid API key not configured')
      return false
    }

    const templateId = process.env.SENDGRID_RSVP_CONFIRMATION_TEMPLATE_ID

    const emailData = {
      to: [{ email: guest.email, name: guest.name }],
      from: { email: this.fromEmail, name: this.fromName },
      templateId: templateId || 'd-default-rsvp-confirmation',
      dynamicTemplateData: {
        guest_name: guest.name,
        attending: guest.attending,
        plus_one: guest.plus_one,
        plus_one_name: guest.plus_one_name,
        invitation_code: guest.invitation_code,
        wedding_date: '11 de Novembro de 2025',
        venue_name: 'EspaÃ§o Villa Bisutti',
        venue_address: 'Rua Funchal, 65 - Vila OlÃ­mpia, SÃ£o Paulo - SP',
        ceremony_time: '16:00h',
        reception_time: '18:00h',
        dress_code: 'Traje Social (evitar branco)',
        dietary_restrictions: guest.dietary_restrictions,
        special_requests: guest.special_requests,
        site_url: process.env.NEXT_PUBLIC_SITE_URL,
        // Portuguese content
        confirmation_message: guest.attending
          ? 'Sua presenÃ§a foi confirmada! Mal podemos esperar para celebrar conosco.'
          : 'Recebemos sua resposta. Entendemos que nÃ£o poderÃ¡ estar presente.',
        subject: guest.attending
          ? 'PresenÃ§a Confirmada - Casamento Hel & Ylana ðŸ’•'
          : 'RSVP Recebido - Casamento Hel & Ylana'
      }\n    }\n\n    try {\n      const response = await fetch('https://api.sendgrid.com/v3/mail/send', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(emailData)\n      })\n\n      if (!response.ok) {\n        console.error('SendGrid error:', await response.text())\n        return false\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error sending RSVP confirmation email:', error)\n      return false\n    }\n  }\n\n  // Send RSVP reminder email\n  static async sendRsvpReminder(guest: Guest): Promise<boolean> {\n    if (!this.apiKey) {\n      console.error('SendGrid API key not configured')\n      return false\n    }\n\n    const templateId = process.env.SENDGRID_RSVP_REMINDER_TEMPLATE_ID\n    const rsvpDeadline = new Date(process.env.RSVP_DEADLINE || '2025-11-01')\n    const daysUntilDeadline = Math.ceil((rsvpDeadline.getTime() - Date.now()) / (1000 * 60 * 60 * 24))\n\n    const emailData = {\n      to: [{ email: guest.email, name: guest.name }],\n      from: { email: this.fromEmail, name: this.fromName },\n      templateId: templateId || 'd-default-rsvp-reminder',\n      dynamicTemplateData: {\n        guest_name: guest.name,\n        invitation_code: guest.invitation_code,\n        wedding_date: '11 de Novembro de 2025',\n        rsvp_deadline: rsvpDeadline.toLocaleDateString('pt-BR'),\n        days_until_deadline: daysUntilDeadline,\n        rsvp_url: `${process.env.NEXT_PUBLIC_SITE_URL}/rsvp?codigo=${guest.invitation_code}`,\n        site_url: process.env.NEXT_PUBLIC_SITE_URL,\n        // Portuguese content\n        subject: `Lembrete: Confirme sua presenÃ§a - Casamento Hel & Ylana ðŸ’•`,\n        reminder_message: `OlÃ¡ ${guest.name}! Ainda nÃ£o recebemos sua confirmaÃ§Ã£o de presenÃ§a para nosso casamento.`,\n        deadline_message: `O prazo para confirmaÃ§Ã£o Ã© ${rsvpDeadline.toLocaleDateString('pt-BR')} (${daysUntilDeadline} dias restantes).`,\n        action_message: 'Por favor, confirme sua presenÃ§a o quanto antes para nos ajudar com o planejamento.'\n      }\n    }\n\n    try {\n      const response = await fetch('https://api.sendgrid.com/v3/mail/send', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(emailData)\n      })\n\n      if (!response.ok) {\n        console.error('SendGrid error:', await response.text())\n        return false\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error sending RSVP reminder email:', error)\n      return false\n    }\n  }\n\n  // Send payment confirmation email\n  static async sendPaymentConfirmation(payment: Payment, guest?: Guest, giftName?: string): Promise<boolean> {\n    if (!this.apiKey) {\n      console.error('SendGrid API key not configured')\n      return false\n    }\n\n    if (!guest?.email) {\n      console.error('Guest email not provided for payment confirmation')\n      return false\n    }\n\n    const templateId = process.env.SENDGRID_PAYMENT_CONFIRMATION_TEMPLATE_ID\n\n    const emailData = {\n      to: [{ email: guest.email, name: guest.name }],\n      from: { email: this.fromEmail, name: this.fromName },\n      templateId: templateId || 'd-default-payment-confirmation',\n      dynamicTemplateData: {\n        guest_name: guest.name,\n        gift_name: giftName || 'Presente',\n        amount: this.formatBrazilianPrice(payment.amount),\n        payment_method: this.getPaymentMethodName(payment.payment_method),\n        payment_status: this.getPaymentStatusName(payment.status),\n        message: payment.message,\n        payment_id: payment.id,\n        wedding_date: '11 de Novembro de 2025',\n        site_url: process.env.NEXT_PUBLIC_SITE_URL,\n        // Portuguese content\n        subject: payment.status === 'completed' \n          ? 'Pagamento Confirmado - Obrigado pelo presente! ðŸ’•'\n          : 'Pagamento Recebido - Aguardando confirmaÃ§Ã£o',\n        confirmation_message: payment.status === 'completed'\n          ? 'Seu pagamento foi confirmado com sucesso! Muito obrigado pelo carinho.'\n          : 'Recebemos seu pagamento e estamos aguardando a confirmaÃ§Ã£o.'\n      }\n    }\n\n    try {\n      const response = await fetch('https://api.sendgrid.com/v3/mail/send', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(emailData)\n      })\n\n      if (!response.ok) {\n        console.error('SendGrid error:', await response.text())\n        return false\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error sending payment confirmation email:', error)\n      return false\n    }\n  }\n\n  // Send bulk RSVP reminders\n  static async sendBulkRsvpReminders(guests: Guest[]): Promise<{ sent: number; failed: number }> {\n    let sent = 0\n    let failed = 0\n\n    for (const guest of guests) {\n      try {\n        const success = await this.sendRsvpReminder(guest)\n        if (success) {\n          sent++\n        } else {\n          failed++\n        }\n        \n        // Add delay to avoid rate limiting\n        await new Promise(resolve => setTimeout(resolve, 100))\n      } catch (error) {\n        console.error(`Error sending reminder to ${guest.email}:`, error)\n        failed++\n      }\n    }\n\n    return { sent, failed }\n  }\n\n  // Send welcome email to new guests\n  static async sendWelcomeEmail(guest: Guest): Promise<boolean> {\n    if (!this.apiKey) {\n      console.error('SendGrid API key not configured')\n      return false\n    }\n\n    const emailData = {\n      to: [{ email: guest.email, name: guest.name }],\n      from: { email: this.fromEmail, name: this.fromName },\n      subject: 'Bem-vindo(a) ao nosso casamento! ðŸ’•',\n      content: [{\n        type: 'text/html',\n        value: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n            <div style=\"text-align: center; margin-bottom: 30px;\">\n              <h1 style=\"color: #d946ef; font-size: 28px; margin-bottom: 10px;\">ðŸ’• Mil Dias de Amor ðŸ’•</h1>\n              <h2 style=\"color: #7c3aed; font-size: 20px;\">Hel & Ylana</h2>\n            </div>\n            \n            <div style=\"background: linear-gradient(135deg, #fef7ff 0%, #f3e8ff 100%); padding: 30px; border-radius: 15px; margin-bottom: 30px;\">\n              <h3 style=\"color: #7c3aed; margin-bottom: 15px;\">OlÃ¡, ${guest.name}!</h3>\n              \n              <p style=\"color: #6b46c1; line-height: 1.6; margin-bottom: 15px;\">\n                Estamos muito felizes em ter vocÃª conosco na celebraÃ§Ã£o do nosso casamento! \n                Nossa jornada de mil dias de amor culminarÃ¡ em uma celebraÃ§Ã£o inesquecÃ­vel.\n              </p>\n              \n              <div style=\"background: white; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n                <h4 style=\"color: #7c3aed; margin-bottom: 10px;\">ðŸ“… Detalhes do Casamento</h4>\n                <p style=\"margin: 5px 0;\"><strong>Data:</strong> 11 de Novembro de 2025</p>\n                <p style=\"margin: 5px 0;\"><strong>CerimÃ´nia:</strong> 16:00h</p>\n                <p style=\"margin: 5px 0;\"><strong>RecepÃ§Ã£o:</strong> 18:00h</p>\n                <p style=\"margin: 5px 0;\"><strong>Traje:</strong> Social (evitar branco)</p>\n              </div>\n              \n              <div style=\"background: white; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n                <h4 style=\"color: #7c3aed; margin-bottom: 10px;\">ðŸŽ« Seu CÃ³digo de Convite</h4>\n                <p style=\"font-size: 18px; font-weight: bold; color: #d946ef; text-align: center; padding: 10px; background: #fef7ff; border-radius: 5px;\">\n                  ${guest.invitation_code}\n                </p>\n                <p style=\"font-size: 14px; color: #6b46c1; text-align: center; margin-top: 10px;\">\n                  Use este cÃ³digo para confirmar sua presenÃ§a\n                </p>\n              </div>\n            </div>\n            \n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${process.env.NEXT_PUBLIC_SITE_URL}/rsvp?codigo=${guest.invitation_code}\" \n                 style=\"background: linear-gradient(135deg, #d946ef 0%, #7c3aed 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; font-weight: bold; display: inline-block;\">\n                Confirmar PresenÃ§a\n              </a>\n            </div>\n            \n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${process.env.NEXT_PUBLIC_SITE_URL}/presentes\" \n                 style=\"background: linear-gradient(135deg, #7c3aed 0%, #d946ef 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; font-weight: bold; display: inline-block; margin-top: 10px;\">\n                Ver Lista de Presentes\n              </a>\n            </div>\n            \n            <div style=\"text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n              <p style=\"color: #6b7280; font-size: 14px;\">\n                Com amor,<br>\n                <strong style=\"color: #7c3aed;\">Hel & Ylana</strong>\n              </p>\n              \n              <p style=\"color: #9ca3af; font-size: 12px; margin-top: 20px;\">\n                <a href=\"${process.env.NEXT_PUBLIC_SITE_URL}\" style=\"color: #7c3aed;\">thousanddaysoflove.com</a>\n              </p>\n            </div>\n          </div>\n        `\n      }]\n    }\n\n    try {\n      const response = await fetch('https://api.sendgrid.com/v3/mail/send', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(emailData)\n      })\n\n      if (!response.ok) {\n        console.error('SendGrid error:', await response.text())\n        return false\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error sending welcome email:', error)\n      return false\n    }\n  }\n\n  // Helper methods\n  private static formatBrazilianPrice(price: number): string {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(price)\n  }\n\n  private static getPaymentMethodName(method: string): string {\n    const methods: Record<string, string> = {\n      'pix': 'PIX',\n      'credit_card': 'CartÃ£o de CrÃ©dito',\n      'bank_transfer': 'TransferÃªncia BancÃ¡ria'\n    }\n    return methods[method] || method\n  }\n\n  private static getPaymentStatusName(status: string): string {\n    const statuses: Record<string, string> = {\n      'pending': 'Pendente',\n      'completed': 'ConcluÃ­do',\n      'failed': 'Falhou',\n      'refunded': 'Reembolsado'\n    }\n    return statuses[status] || status\n  }\n\n  // Test email configuration\n  static async testEmailConfiguration(): Promise<boolean> {\n    if (!this.apiKey) {\n      console.error('SendGrid API key not configured')\n      return false\n    }\n\n    const testEmail = {\n      to: [{ email: process.env.ADMIN_EMAIL || 'hel@thousanddaysoflove.com', name: 'Admin' }],\n      from: { email: this.fromEmail, name: this.fromName },\n      subject: 'Teste de ConfiguraÃ§Ã£o - Mil Dias de Amor',\n      content: [{\n        type: 'text/html',\n        value: `\n          <h2>âœ… ConfiguraÃ§Ã£o do SendGrid OK!</h2>\n          <p>Este Ã© um email de teste para verificar se a configuraÃ§Ã£o do SendGrid estÃ¡ funcionando corretamente.</p>\n          <p><strong>Timestamp:</strong> ${new Date().toLocaleString('pt-BR')}</p>\n        `\n      }]\n    }\n\n    try {\n      const response = await fetch('https://api.sendgrid.com/v3/mail/send', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(testEmail)\n      })\n\n      if (!response.ok) {\n        console.error('SendGrid test email failed:', await response.text())\n        return false\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error sending test email:', error)\n      return false\n    }\n  }\n}