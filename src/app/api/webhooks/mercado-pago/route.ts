import { NextRequest, NextResponse } from 'next/server'\nimport { PaymentService } from '@/lib/services/payments'\nimport { EmailService } from '@/lib/services/email'\nimport { GuestService } from '@/lib/services/guests'\nimport { GiftService } from '@/lib/services/gifts'\n\n// Mercado Pago webhook handler for payment notifications\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    // Verify webhook authenticity (optional but recommended)\n    const webhookSecret = process.env.MERCADO_PAGO_WEBHOOK_SECRET\n    if (webhookSecret) {\n      const signature = request.headers.get('x-signature')\n      // Add signature verification logic here if needed\n    }\n\n    console.log('Mercado Pago webhook received:', body)\n\n    // Handle different notification types\n    if (body.type === 'payment') {\n      await handlePaymentNotification(body.data?.id)\n    }\n\n    return NextResponse.json({ received: true })\n  } catch (error) {\n    console.error('Error processing Mercado Pago webhook:', error)\n    return NextResponse.json(\n      { error: 'Webhook processing failed' },\n      { status: 500 }\n    )\n  }\n}\n\nasync function handlePaymentNotification(mercadoPagoPaymentId: string) {\n  if (!mercadoPagoPaymentId) {\n    console.error('No payment ID provided in webhook')\n    return\n  }\n\n  try {\n    // Get payment details from Mercado Pago\n    const paymentDetails = await getMercadoPagoPayment(mercadoPagoPaymentId)\n    \n    if (!paymentDetails) {\n      console.error('Could not fetch payment details from Mercado Pago')\n      return\n    }\n\n    // Find our internal payment record using external_reference\n    const paymentId = paymentDetails.external_reference\n    if (!paymentId) {\n      console.error('No external_reference found in Mercado Pago payment')\n      return\n    }\n\n    // Update payment status based on Mercado Pago status\n    let newStatus: 'pending' | 'completed' | 'failed' | 'refunded'\n    \n    switch (paymentDetails.status) {\n      case 'approved':\n        newStatus = 'completed'\n        break\n      case 'pending':\n      case 'in_process':\n        newStatus = 'pending'\n        break\n      case 'rejected':\n      case 'cancelled':\n        newStatus = 'failed'\n        break\n      case 'refunded':\n        newStatus = 'refunded'\n        break\n      default:\n        console.log(`Unknown payment status: ${paymentDetails.status}`)\n        return\n    }\n\n    // Update our payment record\n    const updatedPayment = await PaymentService.updatePaymentStatus(\n      paymentId,\n      newStatus,\n      mercadoPagoPaymentId\n    )\n\n    if (!updatedPayment) {\n      console.error('Failed to update payment status')\n      return\n    }\n\n    console.log(`Payment ${paymentId} updated to status: ${newStatus}`)\n\n    // If payment is completed, send confirmation email and update gift quantity\n    if (newStatus === 'completed') {\n      await handleCompletedPayment(updatedPayment)\n    }\n\n  } catch (error) {\n    console.error('Error handling payment notification:', error)\n  }\n}\n\nasync function getMercadoPagoPayment(paymentId: string) {\n  const accessToken = process.env.MERCADO_PAGO_ACCESS_TOKEN\n  \n  if (!accessToken) {\n    throw new Error('Mercado Pago access token not configured')\n  }\n\n  try {\n    const response = await fetch(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    })\n\n    if (!response.ok) {\n      console.error(`Mercado Pago API error: ${response.status}`)\n      return null\n    }\n\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching payment from Mercado Pago:', error)\n    return null\n  }\n}\n\nasync function handleCompletedPayment(payment: any) {\n  try {\n    // Get payment details with related data\n    const fullPayment = await PaymentService.getPaymentById(payment.id)\n    \n    if (!fullPayment) {\n      console.error('Could not fetch full payment details')\n      return\n    }\n\n    // Get gift and guest information\n    const gift = await GiftService.getGiftById(fullPayment.gift_id)\n    const guest = fullPayment.guest_id \n      ? await GuestService.findByEmail('') // Will need to be updated to fetch by ID\n      : null\n\n    // Send confirmation email if we have guest email\n    if (guest?.email) {\n      try {\n        await EmailService.sendPaymentConfirmation(\n          fullPayment,\n          guest,\n          gift?.name\n        )\n        console.log(`Payment confirmation email sent to ${guest.email}`)\n      } catch (error) {\n        console.error('Error sending payment confirmation email:', error)\n      }\n    }\n\n    // Update gift quantity (this should already be done when payment was created)\n    // But we can double-check here\n    if (gift && gift.quantity_purchased < gift.quantity_desired) {\n      try {\n        await GiftService.reserveGift(gift.id, 1)\n        console.log(`Gift ${gift.name} quantity updated`)\n      } catch (error) {\n        console.error('Error updating gift quantity:', error)\n      }\n    }\n\n  } catch (error) {\n    console.error('Error handling completed payment:', error)\n  }\n}\n\n// GET method to verify webhook endpoint is working\nexport async function GET() {\n  return NextResponse.json({\n    status: 'OK',\n    message: 'Mercado Pago webhook endpoint is active',\n    timestamp: new Date().toISOString()\n  })\n}