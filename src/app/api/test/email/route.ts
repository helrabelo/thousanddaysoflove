import { NextRequest, NextResponse } from 'next/server'\nimport { EmailService } from '@/lib/services/email'\nimport { GuestService } from '@/lib/services/guests'\n\n// Test email configuration and sending\nexport async function GET() {\n  try {\n    // Test basic email configuration\n    const configTest = await EmailService.testEmailConfiguration()\n    \n    if (!configTest) {\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Email configuration test failed',\n          details: 'Check SendGrid API key and from email settings'\n        },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Email configuration test successful! üìß',\n      timestamp: new Date().toISOString(),\n      configuration: {\n        apiKey: process.env.SENDGRID_API_KEY ? '‚úÖ API Key configured' : '‚ùå API Key missing',\n        fromEmail: process.env.SENDGRID_FROM_EMAIL || '‚ùå From email not set',\n        fromName: process.env.SENDGRID_FROM_NAME || '‚ùå From name not set',\n        templates: {\n          rsvpConfirmation: process.env.SENDGRID_RSVP_CONFIRMATION_TEMPLATE_ID ? '‚úÖ Configured' : '‚ö†Ô∏è  Using default',\n          rsvpReminder: process.env.SENDGRID_RSVP_REMINDER_TEMPLATE_ID ? '‚úÖ Configured' : '‚ö†Ô∏è  Using default',\n          paymentConfirmation: process.env.SENDGRID_PAYMENT_CONFIRMATION_TEMPLATE_ID ? '‚úÖ Configured' : '‚ö†Ô∏è  Using default'\n        }\n      }\n    })\n\n  } catch (error) {\n    console.error('Email test error:', error)\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Email test failed',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// Test sending specific email types\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    const { type, email, name } = body\n\n    if (!type || !email) {\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Missing required fields: type, email' \n        },\n        { status: 400 }\n      )\n    }\n\n    // Create a test guest for email testing\n    const testGuest = {\n      id: 'test-id',\n      name: name || 'Teste Convidado',\n      email: email,\n      phone: '+55 (11) 99999-9999',\n      attending: true,\n      dietary_restrictions: null,\n      plus_one: false,\n      plus_one_name: null,\n      invitation_code: 'TEST123',\n      rsvp_date: new Date().toISOString(),\n      special_requests: null,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }\n\n    let emailSent = false\n    let emailType = ''\n\n    switch (type) {\n      case 'welcome':\n        emailSent = await EmailService.sendWelcomeEmail(testGuest)\n        emailType = 'Welcome Email'\n        break\n        \n      case 'rsvp_confirmation':\n        emailSent = await EmailService.sendRsvpConfirmation(testGuest)\n        emailType = 'RSVP Confirmation'\n        break\n        \n      case 'rsvp_reminder':\n        emailSent = await EmailService.sendRsvpReminder(testGuest)\n        emailType = 'RSVP Reminder'\n        break\n        \n      case 'payment_confirmation':\n        const testPayment = {\n          id: 'test-payment-id',\n          gift_id: 'test-gift-id',\n          guest_id: testGuest.id,\n          amount: 299.90,\n          status: 'completed' as const,\n          payment_method: 'pix' as const,\n          mercado_pago_payment_id: null,\n          message: 'Teste de pagamento',\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }\n        \n        emailSent = await EmailService.sendPaymentConfirmation(\n          testPayment, \n          testGuest, \n          'Jogo de Panelas Tramontina'\n        )\n        emailType = 'Payment Confirmation'\n        break\n        \n      default:\n        return NextResponse.json(\n          { \n            success: false, \n            error: 'Invalid email type',\n            validTypes: ['welcome', 'rsvp_confirmation', 'rsvp_reminder', 'payment_confirmation']\n          },\n          { status: 400 }\n        )\n    }\n\n    if (emailSent) {\n      return NextResponse.json({\n        success: true,\n        message: `${emailType} sent successfully! üìß`,\n        details: {\n          emailType,\n          recipient: email,\n          timestamp: new Date().toISOString()\n        }\n      })\n    } else {\n      return NextResponse.json(\n        { \n          success: false, \n          error: `Failed to send ${emailType}`,\n          details: 'Check SendGrid configuration and logs'\n        },\n        { status: 500 }\n      )\n    }\n\n  } catch (error) {\n    console.error('Email sending test error:', error)\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Email sending test failed',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}