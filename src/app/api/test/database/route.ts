import { NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/client'\nimport { GuestService } from '@/lib/services/guests'\nimport { GiftService } from '@/lib/services/gifts'\nimport { PaymentService } from '@/lib/services/payments'\n\n// Test database connectivity and basic operations\nexport async function GET() {\n  try {\n    const supabase = createClient()\n    \n    // Test basic connectivity\n    const { data: healthCheck, error: healthError } = await supabase\n      .from('wedding_config')\n      .select('wedding_date')\n      .limit(1)\n\n    if (healthError) {\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Database connection failed',\n          details: healthError.message \n        },\n        { status: 500 }\n      )\n    }\n\n    // Test guest services\n    const guestStats = await GuestService.getGuestStats()\n    \n    // Test gift services\n    const giftStats = await GiftService.getGiftStats()\n    \n    // Test payment services\n    const paymentStats = await PaymentService.getPaymentStats()\n\n    // Test sample data existence\n    const sampleGuests = await GuestService.getAllGuests()\n    const sampleGifts = await GiftService.getAllGifts()\n    \n    return NextResponse.json({\n      success: true,\n      message: 'Database connectivity test successful! ðŸŽŠ',\n      timestamp: new Date().toISOString(),\n      weddingDate: healthCheck?.[0]?.wedding_date,\n      tests: {\n        connectivity: 'âœ… Connected to Supabase',\n        guestService: `âœ… ${guestStats.total} guests loaded`,\n        giftService: `âœ… ${giftStats.length} gift categories`,\n        paymentService: `âœ… ${paymentStats.total} payments tracked`,\n        sampleData: {\n          guests: `${sampleGuests.length} guest records`,\n          gifts: `${sampleGifts.length} gift items`,\n          categories: giftStats.map(s => s.category)\n        }\n      },\n      statistics: {\n        guests: guestStats,\n        payments: paymentStats,\n        gifts: giftStats\n      }\n    })\n\n  } catch (error) {\n    console.error('Database test error:', error)\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Database test failed',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// Test RSVP creation\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    \n    const testRsvp = {\n      name: body.name || 'Teste Convidado',\n      email: body.email || `test-${Date.now()}@example.com`,\n      phone: body.phone || '+55 (11) 99999-9999',\n      attending: body.attending ?? true,\n      plusOne: body.plusOne ?? false,\n      plusOneName: body.plusOneName || null,\n      dietaryRestrictions: body.dietaryRestrictions || null,\n      specialRequests: body.specialRequests || 'Teste de RSVP automÃ¡tico'\n    }\n\n    const result = await GuestService.submitRsvp(testRsvp)\n    \n    if (result.success) {\n      return NextResponse.json({\n        success: true,\n        message: 'Test RSVP created successfully! ðŸŽ‰',\n        guest: result.guest,\n        invitationCode: result.guest?.invitation_code\n      })\n    } else {\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'RSVP creation failed',\n          details: result.error \n        },\n        { status: 400 }\n      )\n    }\n\n  } catch (error) {\n    console.error('RSVP test error:', error)\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'RSVP test failed',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}